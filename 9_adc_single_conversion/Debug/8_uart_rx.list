
8_uart_rx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000324  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800051c  0800051c  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800051c  0800051c  00020008  2**0
                  CONTENTS
  4 .ARM          00000000  0800051c  0800051c  00020008  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800051c  0800051c  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800051c  0800051c  0001051c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000520  08000520  00010520  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000008  20000000  08000524  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000028  20000008  0800052c  00020008  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000030  0800052c  00020030  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000937  00000000  00000000  00020036  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000285  00000000  00000000  0002096d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000098  00000000  00000000  00020bf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000070  00000000  00000000  00020c90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001df54  00000000  00000000  00020d00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000d8a  00000000  00000000  0003ec54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a73ef  00000000  00000000  0003f9de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e6dcd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000015c  00000000  00000000  000e6e20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000008 	.word	0x20000008
 8000214:	00000000 	.word	0x00000000
 8000218:	08000504 	.word	0x08000504

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	2000000c 	.word	0x2000000c
 8000234:	08000504 	.word	0x08000504

08000238 <main>:

char password[8] = "Jeremiah";
char input[8];
char check;
int main()
{
 8000238:	b580      	push	{r7, lr}
 800023a:	b084      	sub	sp, #16
 800023c:	af00      	add	r7, sp, #0
	/*IMPLEMENT THE DRIVER IN A PASSWORD CHECKER APPLICATION*/
	RCC->AHB1ENR |= GPIOBEN;
 800023e:	4b38      	ldr	r3, [pc, #224]	; (8000320 <main+0xe8>)
 8000240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000242:	4a37      	ldr	r2, [pc, #220]	; (8000320 <main+0xe8>)
 8000244:	f043 0302 	orr.w	r3, r3, #2
 8000248:	6313      	str	r3, [r2, #48]	; 0x30

	GPIOB->MODER |= ((1U) | (1U<<14) | (1U<<28));
 800024a:	4b36      	ldr	r3, [pc, #216]	; (8000324 <main+0xec>)
 800024c:	681a      	ldr	r2, [r3, #0]
 800024e:	4935      	ldr	r1, [pc, #212]	; (8000324 <main+0xec>)
 8000250:	4b35      	ldr	r3, [pc, #212]	; (8000328 <main+0xf0>)
 8000252:	4313      	orrs	r3, r2
 8000254:	600b      	str	r3, [r1, #0]
	GPIOB->MODER &= ~((1U<<1) | (1U<<15) | (1U<<29));
 8000256:	4b33      	ldr	r3, [pc, #204]	; (8000324 <main+0xec>)
 8000258:	681a      	ldr	r2, [r3, #0]
 800025a:	4932      	ldr	r1, [pc, #200]	; (8000324 <main+0xec>)
 800025c:	4b33      	ldr	r3, [pc, #204]	; (800032c <main+0xf4>)
 800025e:	4013      	ands	r3, r2
 8000260:	600b      	str	r3, [r1, #0]

	uart3_rxtx_init();
 8000262:	f000 f86f 	bl	8000344 <uart3_rxtx_init>

	while(1)
	{
		//Turn OFF LEDs and reset check
		GPIOB->ODR &= ~(GREEN_LED_PIN| BLUE_LED__PIN | RED_LED_PIN);
 8000266:	4b2f      	ldr	r3, [pc, #188]	; (8000324 <main+0xec>)
 8000268:	695a      	ldr	r2, [r3, #20]
 800026a:	492e      	ldr	r1, [pc, #184]	; (8000324 <main+0xec>)
 800026c:	4b30      	ldr	r3, [pc, #192]	; (8000330 <main+0xf8>)
 800026e:	4013      	ands	r3, r2
 8000270:	614b      	str	r3, [r1, #20]
		check = '1';
 8000272:	4b30      	ldr	r3, [pc, #192]	; (8000334 <main+0xfc>)
 8000274:	2231      	movs	r2, #49	; 0x31
 8000276:	701a      	strb	r2, [r3, #0]


		/*IF TX PROPERLY TRANSMITS "Jeremiah", AND RX RECEIVES IT GREEN LED IS SET
		 * IF IT FAILS, RED LED IS SET*/
		for (int i = 0; i < 8; i++)
 8000278:	2300      	movs	r3, #0
 800027a:	60fb      	str	r3, [r7, #12]
 800027c:	e00b      	b.n	8000296 <main+0x5e>
			input[i] = uart3_read();
 800027e:	f000 f8df 	bl	8000440 <uart3_read>
 8000282:	4603      	mov	r3, r0
 8000284:	4619      	mov	r1, r3
 8000286:	4a2c      	ldr	r2, [pc, #176]	; (8000338 <main+0x100>)
 8000288:	68fb      	ldr	r3, [r7, #12]
 800028a:	4413      	add	r3, r2
 800028c:	460a      	mov	r2, r1
 800028e:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < 8; i++)
 8000290:	68fb      	ldr	r3, [r7, #12]
 8000292:	3301      	adds	r3, #1
 8000294:	60fb      	str	r3, [r7, #12]
 8000296:	68fb      	ldr	r3, [r7, #12]
 8000298:	2b07      	cmp	r3, #7
 800029a:	ddf0      	ble.n	800027e <main+0x46>

		for (int i = 0; i < 8; i++)
 800029c:	2300      	movs	r3, #0
 800029e:	60bb      	str	r3, [r7, #8]
 80002a0:	e00f      	b.n	80002c2 <main+0x8a>
			if (input[i] != password[i])
 80002a2:	4a25      	ldr	r2, [pc, #148]	; (8000338 <main+0x100>)
 80002a4:	68bb      	ldr	r3, [r7, #8]
 80002a6:	4413      	add	r3, r2
 80002a8:	781a      	ldrb	r2, [r3, #0]
 80002aa:	4924      	ldr	r1, [pc, #144]	; (800033c <main+0x104>)
 80002ac:	68bb      	ldr	r3, [r7, #8]
 80002ae:	440b      	add	r3, r1
 80002b0:	781b      	ldrb	r3, [r3, #0]
 80002b2:	429a      	cmp	r2, r3
 80002b4:	d002      	beq.n	80002bc <main+0x84>
				check = 0;
 80002b6:	4b1f      	ldr	r3, [pc, #124]	; (8000334 <main+0xfc>)
 80002b8:	2200      	movs	r2, #0
 80002ba:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < 8; i++)
 80002bc:	68bb      	ldr	r3, [r7, #8]
 80002be:	3301      	adds	r3, #1
 80002c0:	60bb      	str	r3, [r7, #8]
 80002c2:	68bb      	ldr	r3, [r7, #8]
 80002c4:	2b07      	cmp	r3, #7
 80002c6:	ddec      	ble.n	80002a2 <main+0x6a>


		if(check)
 80002c8:	4b1a      	ldr	r3, [pc, #104]	; (8000334 <main+0xfc>)
 80002ca:	781b      	ldrb	r3, [r3, #0]
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d006      	beq.n	80002de <main+0xa6>
			GPIOB->ODR |= (GREEN_LED_PIN);
 80002d0:	4b14      	ldr	r3, [pc, #80]	; (8000324 <main+0xec>)
 80002d2:	695b      	ldr	r3, [r3, #20]
 80002d4:	4a13      	ldr	r2, [pc, #76]	; (8000324 <main+0xec>)
 80002d6:	f043 0301 	orr.w	r3, r3, #1
 80002da:	6153      	str	r3, [r2, #20]
 80002dc:	e005      	b.n	80002ea <main+0xb2>
		else
			GPIOB->ODR |= (RED_LED_PIN);
 80002de:	4b11      	ldr	r3, [pc, #68]	; (8000324 <main+0xec>)
 80002e0:	695b      	ldr	r3, [r3, #20]
 80002e2:	4a10      	ldr	r2, [pc, #64]	; (8000324 <main+0xec>)
 80002e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80002e8:	6153      	str	r3, [r2, #20]

		for (int i = 0; i < 2; i++)
 80002ea:	2300      	movs	r3, #0
 80002ec:	607b      	str	r3, [r7, #4]
 80002ee:	e012      	b.n	8000316 <main+0xde>
		{
			GPIOB->ODR ^= (BLUE_LED__PIN); //Flash BLUE PIN to indicate end of word
 80002f0:	4b0c      	ldr	r3, [pc, #48]	; (8000324 <main+0xec>)
 80002f2:	695b      	ldr	r3, [r3, #20]
 80002f4:	4a0b      	ldr	r2, [pc, #44]	; (8000324 <main+0xec>)
 80002f6:	f083 0380 	eor.w	r3, r3, #128	; 0x80
 80002fa:	6153      	str	r3, [r2, #20]
			for (int i = 0; i < 1000000; i++){}
 80002fc:	2300      	movs	r3, #0
 80002fe:	603b      	str	r3, [r7, #0]
 8000300:	e002      	b.n	8000308 <main+0xd0>
 8000302:	683b      	ldr	r3, [r7, #0]
 8000304:	3301      	adds	r3, #1
 8000306:	603b      	str	r3, [r7, #0]
 8000308:	683b      	ldr	r3, [r7, #0]
 800030a:	4a0d      	ldr	r2, [pc, #52]	; (8000340 <main+0x108>)
 800030c:	4293      	cmp	r3, r2
 800030e:	ddf8      	ble.n	8000302 <main+0xca>
		for (int i = 0; i < 2; i++)
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	3301      	adds	r3, #1
 8000314:	607b      	str	r3, [r7, #4]
 8000316:	687b      	ldr	r3, [r7, #4]
 8000318:	2b01      	cmp	r3, #1
 800031a:	dde9      	ble.n	80002f0 <main+0xb8>
		GPIOB->ODR &= ~(GREEN_LED_PIN| BLUE_LED__PIN | RED_LED_PIN);
 800031c:	e7a3      	b.n	8000266 <main+0x2e>
 800031e:	bf00      	nop
 8000320:	40023800 	.word	0x40023800
 8000324:	40020400 	.word	0x40020400
 8000328:	10004001 	.word	0x10004001
 800032c:	dfff7ffd 	.word	0xdfff7ffd
 8000330:	ffffbf7e 	.word	0xffffbf7e
 8000334:	2000002c 	.word	0x2000002c
 8000338:	20000024 	.word	0x20000024
 800033c:	20000000 	.word	0x20000000
 8000340:	000f423f 	.word	0x000f423f

08000344 <uart3_rxtx_init>:
	uart3_write(ch);
	return ch;
}

void uart3_rxtx_init(void)
{
 8000344:	b580      	push	{r7, lr}
 8000346:	af00      	add	r7, sp, #0
	 * 2. Set PD8 mode to alternate function mode
	 * 3. Set PD9 mode to alternate function mode
	 * 4. Set PD8 alternate function type to UART_TX (AF07)
	 * 5. Set PD9 alternate function type to UART_RX (AF07)*/
	//1.
	RCC->AHB1ENR |= GPIODEN;
 8000348:	4b26      	ldr	r3, [pc, #152]	; (80003e4 <uart3_rxtx_init+0xa0>)
 800034a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800034c:	4a25      	ldr	r2, [pc, #148]	; (80003e4 <uart3_rxtx_init+0xa0>)
 800034e:	f043 0308 	orr.w	r3, r3, #8
 8000352:	6313      	str	r3, [r2, #48]	; 0x30
	//2.
	GPIOD->MODER |= (1U<<17);
 8000354:	4b24      	ldr	r3, [pc, #144]	; (80003e8 <uart3_rxtx_init+0xa4>)
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	4a23      	ldr	r2, [pc, #140]	; (80003e8 <uart3_rxtx_init+0xa4>)
 800035a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800035e:	6013      	str	r3, [r2, #0]
	GPIOD->MODER &= ~(1U<<16);
 8000360:	4b21      	ldr	r3, [pc, #132]	; (80003e8 <uart3_rxtx_init+0xa4>)
 8000362:	681b      	ldr	r3, [r3, #0]
 8000364:	4a20      	ldr	r2, [pc, #128]	; (80003e8 <uart3_rxtx_init+0xa4>)
 8000366:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800036a:	6013      	str	r3, [r2, #0]
	//3.
	GPIOD->MODER |= (1U<<19);
 800036c:	4b1e      	ldr	r3, [pc, #120]	; (80003e8 <uart3_rxtx_init+0xa4>)
 800036e:	681b      	ldr	r3, [r3, #0]
 8000370:	4a1d      	ldr	r2, [pc, #116]	; (80003e8 <uart3_rxtx_init+0xa4>)
 8000372:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000376:	6013      	str	r3, [r2, #0]
	GPIOD->MODER &= ~(1U<<18);
 8000378:	4b1b      	ldr	r3, [pc, #108]	; (80003e8 <uart3_rxtx_init+0xa4>)
 800037a:	681b      	ldr	r3, [r3, #0]
 800037c:	4a1a      	ldr	r2, [pc, #104]	; (80003e8 <uart3_rxtx_init+0xa4>)
 800037e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000382:	6013      	str	r3, [r2, #0]
	//4.
	GPIOD->AFR[1] &= ~(1U<<3);
 8000384:	4b18      	ldr	r3, [pc, #96]	; (80003e8 <uart3_rxtx_init+0xa4>)
 8000386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000388:	4a17      	ldr	r2, [pc, #92]	; (80003e8 <uart3_rxtx_init+0xa4>)
 800038a:	f023 0308 	bic.w	r3, r3, #8
 800038e:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOD->AFR[1] |= (7U);
 8000390:	4b15      	ldr	r3, [pc, #84]	; (80003e8 <uart3_rxtx_init+0xa4>)
 8000392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000394:	4a14      	ldr	r2, [pc, #80]	; (80003e8 <uart3_rxtx_init+0xa4>)
 8000396:	f043 0307 	orr.w	r3, r3, #7
 800039a:	6253      	str	r3, [r2, #36]	; 0x24
	//5.
	GPIOD->AFR[1] &= ~(1U<<7);
 800039c:	4b12      	ldr	r3, [pc, #72]	; (80003e8 <uart3_rxtx_init+0xa4>)
 800039e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003a0:	4a11      	ldr	r2, [pc, #68]	; (80003e8 <uart3_rxtx_init+0xa4>)
 80003a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80003a6:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOD->AFR[1] |= (7U<<4);
 80003a8:	4b0f      	ldr	r3, [pc, #60]	; (80003e8 <uart3_rxtx_init+0xa4>)
 80003aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003ac:	4a0e      	ldr	r2, [pc, #56]	; (80003e8 <uart3_rxtx_init+0xa4>)
 80003ae:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 80003b2:	6253      	str	r3, [r2, #36]	; 0x24
	 * 1. Enable clock access to UART2
	 * 2. Configure baud rate
	 * 3. Configure the transfer direction for both directions
	 * 4. Enable UART module*/
	//1.
	RCC->APB1ENR |= UART3_EN;
 80003b4:	4b0b      	ldr	r3, [pc, #44]	; (80003e4 <uart3_rxtx_init+0xa0>)
 80003b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80003b8:	4a0a      	ldr	r2, [pc, #40]	; (80003e4 <uart3_rxtx_init+0xa0>)
 80003ba:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80003be:	6413      	str	r3, [r2, #64]	; 0x40
	//2.
	uart_set_baudrate(USART3, APB1_CLK, UART_BAUDRATE);
 80003c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80003c4:	4909      	ldr	r1, [pc, #36]	; (80003ec <uart3_rxtx_init+0xa8>)
 80003c6:	480a      	ldr	r0, [pc, #40]	; (80003f0 <uart3_rxtx_init+0xac>)
 80003c8:	f000 f814 	bl	80003f4 <uart_set_baudrate>
	//3.
	USART3->CR1 = CR1_TE | CR1_RE;
 80003cc:	4b08      	ldr	r3, [pc, #32]	; (80003f0 <uart3_rxtx_init+0xac>)
 80003ce:	220c      	movs	r2, #12
 80003d0:	601a      	str	r2, [r3, #0]
	//4.
	USART3->CR1 |= CR1_UE;
 80003d2:	4b07      	ldr	r3, [pc, #28]	; (80003f0 <uart3_rxtx_init+0xac>)
 80003d4:	681b      	ldr	r3, [r3, #0]
 80003d6:	4a06      	ldr	r2, [pc, #24]	; (80003f0 <uart3_rxtx_init+0xac>)
 80003d8:	f043 0301 	orr.w	r3, r3, #1
 80003dc:	6013      	str	r3, [r2, #0]

}
 80003de:	bf00      	nop
 80003e0:	bd80      	pop	{r7, pc}
 80003e2:	bf00      	nop
 80003e4:	40023800 	.word	0x40023800
 80003e8:	40020c00 	.word	0x40020c00
 80003ec:	00f42400 	.word	0x00f42400
 80003f0:	40004800 	.word	0x40004800

080003f4 <uart_set_baudrate>:
	USART3->CR1 |= CR1_UE;

}

static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t BaudRate)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b084      	sub	sp, #16
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	60f8      	str	r0, [r7, #12]
 80003fc:	60b9      	str	r1, [r7, #8]
 80003fe:	607a      	str	r2, [r7, #4]
	USARTx->BRR = compute_uart_bd(PeriphClk, BaudRate);
 8000400:	6879      	ldr	r1, [r7, #4]
 8000402:	68b8      	ldr	r0, [r7, #8]
 8000404:	f000 f808 	bl	8000418 <compute_uart_bd>
 8000408:	4603      	mov	r3, r0
 800040a:	461a      	mov	r2, r3
 800040c:	68fb      	ldr	r3, [r7, #12]
 800040e:	60da      	str	r2, [r3, #12]
}
 8000410:	bf00      	nop
 8000412:	3710      	adds	r7, #16
 8000414:	46bd      	mov	sp, r7
 8000416:	bd80      	pop	{r7, pc}

08000418 <compute_uart_bd>:

static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t BaudRate)
{
 8000418:	b480      	push	{r7}
 800041a:	b083      	sub	sp, #12
 800041c:	af00      	add	r7, sp, #0
 800041e:	6078      	str	r0, [r7, #4]
 8000420:	6039      	str	r1, [r7, #0]
	return (PeriphClk + (BaudRate / 2U))/BaudRate;
 8000422:	683b      	ldr	r3, [r7, #0]
 8000424:	085a      	lsrs	r2, r3, #1
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	441a      	add	r2, r3
 800042a:	683b      	ldr	r3, [r7, #0]
 800042c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000430:	b29b      	uxth	r3, r3
}
 8000432:	4618      	mov	r0, r3
 8000434:	370c      	adds	r7, #12
 8000436:	46bd      	mov	sp, r7
 8000438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800043c:	4770      	bx	lr
	...

08000440 <uart3_read>:

char uart3_read(void)
{
 8000440:	b480      	push	{r7}
 8000442:	af00      	add	r7, sp, #0
	/*
	 * 1. Ensure receive data register is not empty
	 * 2. Read from receive data register*/

	//1.
	while(!(USART3->ISR & ISR_RXNE)){}
 8000444:	bf00      	nop
 8000446:	4b07      	ldr	r3, [pc, #28]	; (8000464 <uart3_read+0x24>)
 8000448:	69db      	ldr	r3, [r3, #28]
 800044a:	f003 0320 	and.w	r3, r3, #32
 800044e:	2b00      	cmp	r3, #0
 8000450:	d0f9      	beq.n	8000446 <uart3_read+0x6>

	return (USART3->RDR /*& ~(0b11111111)*/);
 8000452:	4b04      	ldr	r3, [pc, #16]	; (8000464 <uart3_read+0x24>)
 8000454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000456:	b2db      	uxtb	r3, r3
}
 8000458:	4618      	mov	r0, r3
 800045a:	46bd      	mov	sp, r7
 800045c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000460:	4770      	bx	lr
 8000462:	bf00      	nop
 8000464:	40004800 	.word	0x40004800

08000468 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000468:	480d      	ldr	r0, [pc, #52]	; (80004a0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800046a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800046c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000470:	480c      	ldr	r0, [pc, #48]	; (80004a4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000472:	490d      	ldr	r1, [pc, #52]	; (80004a8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000474:	4a0d      	ldr	r2, [pc, #52]	; (80004ac <LoopForever+0xe>)
  movs r3, #0
 8000476:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000478:	e002      	b.n	8000480 <LoopCopyDataInit>

0800047a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800047a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800047c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800047e:	3304      	adds	r3, #4

08000480 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000480:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000482:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000484:	d3f9      	bcc.n	800047a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000486:	4a0a      	ldr	r2, [pc, #40]	; (80004b0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000488:	4c0a      	ldr	r4, [pc, #40]	; (80004b4 <LoopForever+0x16>)
  movs r3, #0
 800048a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800048c:	e001      	b.n	8000492 <LoopFillZerobss>

0800048e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800048e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000490:	3204      	adds	r2, #4

08000492 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000492:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000494:	d3fb      	bcc.n	800048e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000496:	f000 f811 	bl	80004bc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800049a:	f7ff fecd 	bl	8000238 <main>

0800049e <LoopForever>:

LoopForever:
    b LoopForever
 800049e:	e7fe      	b.n	800049e <LoopForever>
  ldr   r0, =_estack
 80004a0:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80004a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004a8:	20000008 	.word	0x20000008
  ldr r2, =_sidata
 80004ac:	08000524 	.word	0x08000524
  ldr r2, =_sbss
 80004b0:	20000008 	.word	0x20000008
  ldr r4, =_ebss
 80004b4:	20000030 	.word	0x20000030

080004b8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80004b8:	e7fe      	b.n	80004b8 <ADC_IRQHandler>
	...

080004bc <__libc_init_array>:
 80004bc:	b570      	push	{r4, r5, r6, lr}
 80004be:	4d0d      	ldr	r5, [pc, #52]	; (80004f4 <__libc_init_array+0x38>)
 80004c0:	4c0d      	ldr	r4, [pc, #52]	; (80004f8 <__libc_init_array+0x3c>)
 80004c2:	1b64      	subs	r4, r4, r5
 80004c4:	10a4      	asrs	r4, r4, #2
 80004c6:	2600      	movs	r6, #0
 80004c8:	42a6      	cmp	r6, r4
 80004ca:	d109      	bne.n	80004e0 <__libc_init_array+0x24>
 80004cc:	4d0b      	ldr	r5, [pc, #44]	; (80004fc <__libc_init_array+0x40>)
 80004ce:	4c0c      	ldr	r4, [pc, #48]	; (8000500 <__libc_init_array+0x44>)
 80004d0:	f000 f818 	bl	8000504 <_init>
 80004d4:	1b64      	subs	r4, r4, r5
 80004d6:	10a4      	asrs	r4, r4, #2
 80004d8:	2600      	movs	r6, #0
 80004da:	42a6      	cmp	r6, r4
 80004dc:	d105      	bne.n	80004ea <__libc_init_array+0x2e>
 80004de:	bd70      	pop	{r4, r5, r6, pc}
 80004e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80004e4:	4798      	blx	r3
 80004e6:	3601      	adds	r6, #1
 80004e8:	e7ee      	b.n	80004c8 <__libc_init_array+0xc>
 80004ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80004ee:	4798      	blx	r3
 80004f0:	3601      	adds	r6, #1
 80004f2:	e7f2      	b.n	80004da <__libc_init_array+0x1e>
 80004f4:	0800051c 	.word	0x0800051c
 80004f8:	0800051c 	.word	0x0800051c
 80004fc:	0800051c 	.word	0x0800051c
 8000500:	08000520 	.word	0x08000520

08000504 <_init>:
 8000504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000506:	bf00      	nop
 8000508:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800050a:	bc08      	pop	{r3}
 800050c:	469e      	mov	lr, r3
 800050e:	4770      	bx	lr

08000510 <_fini>:
 8000510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000512:	bf00      	nop
 8000514:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000516:	bc08      	pop	{r3}
 8000518:	469e      	mov	lr, r3
 800051a:	4770      	bx	lr
